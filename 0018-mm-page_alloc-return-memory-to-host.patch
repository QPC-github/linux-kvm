From f52f6daa6e70ff07319a9d35b0c7bf5c1dbb82b5 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 30 Mar 2016 05:33:42 -0600
Subject: [PATCH 18/19] mm: page_alloc: return memory to host

memshrinker in the kvm kernel
---
 mm/page_alloc.c | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 838ca8bb..8803657 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -63,6 +63,7 @@
 #include <linux/sched/rt.h>
 #include <linux/page_owner.h>
 #include <linux/kthread.h>
+#include <linux/kvm_para.h>
 
 #include <asm/sections.h>
 #include <asm/tlbflush.h>
@@ -574,6 +575,28 @@ static inline void set_page_order(struct page *page, unsigned int order)
 	__SetPageBuddy(page);
 }
 
+static inline void arch_new_buddy(struct page *page, unsigned int order)
+{
+	static int have_hypercall = 0;
+	int ret;
+
+	if (have_hypercall < 0)
+		return;
+	if (have_hypercall == 0 && !kvm_para_available()) {
+		have_hypercall = -1;
+		return;
+	}
+	have_hypercall = 1;
+
+	if (order < 6)
+		return;
+
+	ret = kvm_hypercall2(KVM_HC_RETURN_MEM, page_to_phys(page), PAGE_SIZE << order);
+
+	if (ret == -KVM_ENOSYS)
+		have_hypercall = -1;
+}
+
 static inline void rmv_page_order(struct page *page)
 {
 	__ClearPageBuddy(page);
@@ -703,6 +726,7 @@ static inline void __free_one_page(struct page *page,
 		page = page + (combined_idx - page_idx);
 		page_idx = combined_idx;
 		order++;
+		arch_new_buddy(page, order);
 	}
 	set_page_order(page, order);
 
-- 
2.4.3

