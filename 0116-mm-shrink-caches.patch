From dca9852bb8577cb0a391f1fa4a7493abd4a62fb6 Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 30 Mar 2016 05:44:00 -0600
Subject: [PATCH 116/117] mm: shrink caches

memshrinker in the kvm kernel
---
 fs/drop_caches.c   | 21 +++++++++++++++++++++
 include/linux/mm.h |  3 +++
 kernel/sysctl.c    |  7 +++++++
 mm/vmscan.c        |  2 --
 4 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/fs/drop_caches.c b/fs/drop_caches.c
index d72d52b..91d506e 100644
--- a/fs/drop_caches.c
+++ b/fs/drop_caches.c
@@ -8,10 +8,12 @@
 #include <linux/writeback.h>
 #include <linux/sysctl.h>
 #include <linux/gfp.h>
+#include <linux/swap.h>
 #include "internal.h"
 
 /* A global variable is a bit ugly, but it keeps the code simple */
 int sysctl_drop_caches;
+int sysctl_shrink_caches_mb;
 
 static void drop_pagecache_sb(struct super_block *sb, void *unused)
 {
@@ -67,3 +69,22 @@ int drop_caches_sysctl_handler(struct ctl_table *table, int write,
 	}
 	return 0;
 }
+
+int shrink_caches_sysctl_handler(struct ctl_table *table, int write,
+	void __user *buffer, size_t *length, loff_t *ppos)
+{
+	int ret;
+
+	ret = proc_dointvec(table, write, buffer, length, ppos);
+	if (ret)
+		return ret;
+	if (write)
+		shrink_all_memory(1024 * 1024 / PAGE_SIZE * sysctl_shrink_caches_mb);
+
+	/*
+	 * Now that a bunch of memory is freed, empty the per cpu caches as well
+	 */
+	lru_add_drain_all();
+
+	return 0;
+}
diff --git a/include/linux/mm.h b/include/linux/mm.h
index ece042d..71a807d 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -2263,6 +2263,9 @@ static inline int in_gate_area(struct mm_struct *mm, unsigned long addr)
 extern int sysctl_drop_caches;
 int drop_caches_sysctl_handler(struct ctl_table *, int,
 					void __user *, size_t *, loff_t *);
+extern int sysctl_shrink_caches_mb;
+int shrink_caches_sysctl_handler(struct ctl_table *, int,
+					void __user *, size_t *, loff_t *);
 #endif
 
 void drop_slab(void);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 87b2fc3..8f26737 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -1389,6 +1389,13 @@ static struct ctl_table vm_table[] = {
 		.extra1		= &one,
 		.extra2		= &four,
 	},
+	{
+		.procname	= "shrink_caches_mb",
+		.data		= &sysctl_shrink_caches_mb,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= shrink_caches_sysctl_handler,
+	},
 #ifdef CONFIG_COMPACTION
 	{
 		.procname	= "compact_memory",
diff --git a/mm/vmscan.c b/mm/vmscan.c
index c4a2f45..7097c3a 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -3456,7 +3456,6 @@ void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx)
 	wake_up_interruptible(&pgdat->kswapd_wait);
 }
 
-#ifdef CONFIG_HIBERNATION
 /*
  * Try to free `nr_to_reclaim' of memory, system-wide, and return the number of
  * freed pages.
@@ -3494,7 +3493,6 @@ unsigned long shrink_all_memory(unsigned long nr_to_reclaim)
 
 	return nr_reclaimed;
 }
-#endif /* CONFIG_HIBERNATION */
 
 /* It's optimal to keep kswapds on the same CPUs as their memory, but
    not required for correctness.  So if the last cpu in a node goes
-- 
2.9.2

