
--- linux-4.3/mm/page_alloc.c.org	2015-11-15 11:21:45.071441772 -0500
+++ linux-4.3/mm/page_alloc.c	2015-11-15 11:44:10.144626044 -0500
@@ -62,6 +62,7 @@
 #include <linux/sched/rt.h>
 #include <linux/page_owner.h>
 #include <linux/kthread.h>
+#include <linux/kvm_para.h>
 
 #include <asm/sections.h>
 #include <asm/tlbflush.h>
@@ -570,6 +571,28 @@
 	__SetPageBuddy(page);
 }
 
+static inline void arch_new_buddy(struct page *page, unsigned int order)
+{
+	static int have_hypercall = 0;
+	int ret;
+
+	if (have_hypercall < 0)
+		return;
+	if (have_hypercall == 0 && !kvm_para_available()) {
+		have_hypercall = -1;
+		return;
+	}
+	have_hypercall = 1;
+	
+	if (order < 6)
+		return;
+
+	ret = kvm_hypercall2(KVM_HC_RETURN_MEM, page_to_phys(page), PAGE_SIZE << order);
+
+	if (ret == -KVM_ENOSYS)
+		have_hypercall = -1;
+}
+
 static inline void rmv_page_order(struct page *page)
 {
 	__ClearPageBuddy(page);
@@ -699,6 +721,7 @@
 		page = page + (combined_idx - page_idx);
 		page_idx = combined_idx;
 		order++;
+		arch_new_buddy(page, order);
 	}
 	set_page_order(page, order);
 
