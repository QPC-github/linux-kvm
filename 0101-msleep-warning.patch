From 2b1cc77a0d4d74598a42040b05cc1a27270ba43d Mon Sep 17 00:00:00 2001
From: Arjan van de Ven <arjan@linux.intel.com>
Date: Wed, 7 Dec 2016 17:23:13 -0600
Subject: [PATCH 101/114] msleep warning

---
 arch/x86/kernel/alternative.c |  4 ++++
 drivers/acpi/bus.c            |  6 ++++++
 drivers/base/firmware_class.c |  1 +
 drivers/block/virtio_blk.c    |  4 ++--
 include/linux/blkdev.h        |  2 +-
 init/main.c                   |  2 +-
 kernel/kmod.c                 | 11 +++++++++++
 kernel/time/timer.c           |  6 ++++++
 net/netlink/af_netlink.c      |  2 +-
 9 files changed, 33 insertions(+), 5 deletions(-)

diff --git a/arch/x86/kernel/alternative.c b/arch/x86/kernel/alternative.c
index c5b8f760473c..15889cfcf93a 100644
--- a/arch/x86/kernel/alternative.c
+++ b/arch/x86/kernel/alternative.c
@@ -632,7 +632,9 @@ void __init alternative_instructions(void)
 	 * patching.
 	 */
 
+	printk("clr: Applying alternatives\n");
 	apply_alternatives(__alt_instructions, __alt_instructions_end);
+	printk("clr: Applying alternatives done\n");
 
 #ifdef CONFIG_SMP
 	/* Patch to UP if other cpus not imminent. */
@@ -643,6 +645,8 @@ void __init alternative_instructions(void)
 					    _text, _etext);
 	}
 
+	printk("clr: Applying alternatives smp done\n");
+
 	if (!uniproc_patched || num_possible_cpus() == 1)
 		free_init_pages("SMP alternatives",
 				(unsigned long)__smp_locks,
diff --git a/drivers/acpi/bus.c b/drivers/acpi/bus.c
index 95855cb9d6fb..10fee6558f9d 100644
--- a/drivers/acpi/bus.c
+++ b/drivers/acpi/bus.c
@@ -1176,6 +1176,8 @@ static int __init acpi_bus_init(void)
 struct kobject *acpi_kobj;
 EXPORT_SYMBOL_GPL(acpi_kobj);
 
+extern int warn_on_msleep;
+
 static int __init acpi_init(void)
 {
 	int result;
@@ -1185,6 +1187,8 @@ static int __init acpi_init(void)
 		return -ENODEV;
 	}
 
+	warn_on_msleep = 1;
+
 	acpi_kobj = kobject_create_and_add("acpi", firmware_kobj);
 	if (!acpi_kobj) {
 		printk(KERN_WARNING "%s: kset create error\n", __func__);
@@ -1195,6 +1199,7 @@ static int __init acpi_init(void)
 	result = acpi_bus_init();
 	if (result) {
 		disable_acpi();
+		warn_on_msleep = 0;
 		return result;
 	}
 
@@ -1208,6 +1213,7 @@ static int __init acpi_init(void)
 	acpi_debugger_init();
 	acpi_setup_sb_notify_handler();
 	acpi_set_processor_mapping();
+/*	warn_on_msleep = 0;   */
 	return 0;
 }
 
diff --git a/drivers/base/firmware_class.c b/drivers/base/firmware_class.c
index ac350c518e0c..93026cbfd758 100644
--- a/drivers/base/firmware_class.c
+++ b/drivers/base/firmware_class.c
@@ -1258,6 +1258,7 @@ request_firmware(const struct firmware **firmware_p, const char *name,
 {
 	int ret;
 
+	printk("clr: request_firmware: %s\n", name);
 	/* Need to pin this module until return */
 	__module_get(THIS_MODULE);
 	ret = _request_firmware(firmware_p, name, device, NULL, 0,
diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index 10332c24f961..e8d031c2437f 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -850,7 +850,7 @@ static struct virtio_driver virtio_blk = {
 #endif
 };
 
-static int __init init(void)
+static int __init virtio_blk_init(void)
 {
 	int error;
 
@@ -882,7 +882,7 @@ static void __exit fini(void)
 	unregister_blkdev(major, "virtblk");
 	destroy_workqueue(virtblk_wq);
 }
-module_init(init);
+module_init(virtio_blk_init);
 module_exit(fini);
 
 MODULE_DEVICE_TABLE(virtio, id_table);
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 1ca8e8fd1078..dba53ae708bc 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -41,7 +41,7 @@ struct pr_ops;
 struct rq_wb;
 
 #define BLKDEV_MIN_RQ	4
-#define BLKDEV_MAX_RQ	128	/* Default maximum */
+#define BLKDEV_MAX_RQ	4096	/* Default maximum */
 
 /*
  * Maximum number of blkcg policies allowed to be registered concurrently.
diff --git a/init/main.c b/init/main.c
index b0c9d6facef9..d9c4def916a1 100644
--- a/init/main.c
+++ b/init/main.c
@@ -762,7 +762,7 @@ static int __init_or_module do_one_initcall_debug(initcall_t fn)
 	unsigned long long duration;
 	int ret;
 
-	printk(KERN_DEBUG "calling  %pF @ %i\n", fn, task_pid_nr(current));
+	printk(KERN_DEBUG "calling  %pF @ %i\n", fn, raw_smp_processor_id());
 	calltime = ktime_get();
 	ret = fn();
 	rettime = ktime_get();
diff --git a/kernel/kmod.c b/kernel/kmod.c
index d45c96073afb..e3698b91816e 100644
--- a/kernel/kmod.c
+++ b/kernel/kmod.c
@@ -76,6 +76,8 @@ static int call_modprobe(char *module_name, int wait)
 		NULL
 	};
 
+	printk("clr: call_modprobe: %s   %i \n", module_name, wait);
+
 	char **argv = kmalloc(sizeof(char *[5]), GFP_KERNEL);
 	if (!argv)
 		goto out;
@@ -249,6 +251,15 @@ static int call_usermodehelper_exec_async(void *data)
 
 	commit_creds(new);
 
+	if (sub_info->argv && sub_info->argv[0]) {
+		printk("clr: ____call_usermodehelper %s\n", sub_info->argv[0]);
+		if (sub_info->argv[1]) {
+			printk("   arg1 : %s\n", sub_info->argv[1]);
+			if (sub_info->argv[2])
+				printk("   arg2 : %s\n", sub_info->argv[2]);
+		}
+	}
+
 	retval = do_execve(getname_kernel(sub_info->path),
 			   (const char __user *const __user *)sub_info->argv,
 			   (const char __user *const __user *)sub_info->envp);
diff --git a/kernel/time/timer.c b/kernel/time/timer.c
index ec33a6933eae..4262ddf0b166 100644
--- a/kernel/time/timer.c
+++ b/kernel/time/timer.c
@@ -1872,6 +1872,9 @@ void __init init_timers(void)
 	open_softirq(TIMER_SOFTIRQ, run_timer_softirq);
 }
 
+int warn_on_msleep;
+EXPORT_SYMBOL_GPL(warn_on_msleep);
+
 /**
  * msleep - sleep safely even with waitqueue interruptions
  * @msecs: Time in milliseconds to sleep for
@@ -1880,6 +1883,9 @@ void msleep(unsigned int msecs)
 {
 	unsigned long timeout = msecs_to_jiffies(msecs) + 1;
 
+/*	if (warn_on_msleep)  */
+		WARN(1, "clr: msleep(%i) called", msecs);
+
 	while (timeout)
 		timeout = schedule_timeout_uninterruptible(timeout);
 }
diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 161b628ab2b0..940d1c991b1c 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -613,7 +613,7 @@ static int netlink_create(struct net *net, struct socket *sock, int protocol,
 
 	netlink_lock_table();
 #ifdef CONFIG_MODULES
-	if (!nl_table[protocol].registered) {
+	if (!nl_table[protocol].registered && protocol != 9) {
 		netlink_unlock_table();
 		request_module("net-pf-%d-proto-%d", PF_NETLINK, protocol);
 		netlink_lock_table();
-- 
2.11.1

